//@ts-nocheck
//@ts-ignore
import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "@/styles/form.module.css";
import { FormEvent, useRef, useState } from "react";
import {
  ChatCompletionRequestMessage,
  ChatCompletionResponseMessage,
  CreateChatCompletionResponse,
} from "openai";
import { chatHistory } from "models/types";
import { ReactMarkdown } from "react-markdown/lib/react-markdown";
import remarkGfm from "remark-gfm";
import styled from "styled-components";
import { InputProps, Table, TableProps } from "antd";
import MessageInputBar from "components/chat/inputBar";
import Messages from "components/chat/messages";

const inter = Inter({ subsets: ["latin"] });

let MessageInput = styled.textarea`
  width: 50vw;
  min-width: 600px;
  padding: 2rem 1rem;
  height: 100px;
  outline: none;
  border: none;
  border-radius: 5px;
  transition: all.2s ease;
  box-shadow: 0 0 4px #00000045;
  &:focus {
    outline: none;
    border: none;
    box-shadow: 0 0 10px #292929b0;
  }
`;
const ChatHistorySection = styled.section`
  text-align: center;
  margin: 2rem auto;
  width: 100%;
`;
const Main = styled.main`
  height: 100vh;
  width: 100vw;
`;
export default function Home() {
  const [chatHistory, setChatHistory] = useState<chatHistory>([
    {
      content: "you are a helpful ai chat bot",
      role: "system",
    },
    {
      content: "you are a helpful ai chat bot",
      role: "assistant",
    },
    {
      content: "you are a helpful ai chat bot",
      role: "user",
    },
  ]);

  const [topic, setResult] = useState<string>("");
  const inputRef = useRef<HTMLInputElement>(null);
  const pushChat = (
    message: ChatCompletionResponseMessage | ChatCompletionRequestMessage
  ) => {
    setChatHistory((prev) => [...structuredClone(prev), message]);
  };

  const popChat = () => {
    setChatHistory((perv) => perv.slice(0, perv.length - 1));
  };
  const submitHandler = async (event: FormEvent) => {
    event.preventDefault();
    const message = inputRef.current?.value as string;
    const newChatMessage: ChatCompletionRequestMessage = {
      content: message,
      role: "user",
    };
    const newChatHistory = [...structuredClone(chatHistory), newChatMessage];
    console.log(newChatHistory);
    pushChat(newChatMessage);
    if (message.length) {
      try {
        const res = await fetch("/api/chatgpt", {
          method: "POST",
          body: JSON.stringify(newChatHistory),
        });
        const resultJson = (await res.json()) as CreateChatCompletionResponse;
        const resultText = resultJson.choices[0].message?.content;
        pushChat({ content: resultText!, role: "assistant" });
      } catch (err) {
        popChat();
      }
    }
  };

  return (
    <>
      <Head>
        <title>Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Main
        style={{
          height: "100vh",
          width: "100vw",
          padding: "0 1rem",
        }}
      >
        <ChatHistorySection>
          {/* <Table
            style={{
              width: "100%",
            }}
            dataSource={chatHistory
              .filter((chat) => chat.role !== "system")
              .map((chat, index) => {
                return {
                  ...chat,
                  key: index,
                };
              })}
            columns={Object.keys(chatHistory[0]).map((key) => ({
              title: key,
              dataIndex: key,
              key: key,
            }))}
          /> */}
          <Messages messages={chatHistory} />
        </ChatHistorySection>
        <MessageInputBar />
      </Main>
    </>
  );
}
