import Head from "next/head";
import { Inter } from "@next/font/google";
import { useRef, useState } from "react";
import {
  ChatCompletionRequestMessage,
  ChatCompletionResponseMessage,
} from "openai";
import { chatHistory, messageItem } from "models/types";
import MessageInputBar from "components/chat/inputBar";
import Messages from "components/chat/messages";
import { useSendMessage } from "reactQuery/useSendMessage";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { data, mutate, mutateAsync } = useSendMessage();
  const [chatHistory, setChatHistory] = useState<chatHistory>([
    // {
    //   content: "you are a helpful ai chat bot",
    //   role: "system",
    // },
    {
      content: "Hey!",
      role: "assistant",
    },
  ]);

  const pushChat = (
    message: ChatCompletionResponseMessage | ChatCompletionRequestMessage
  ) => {
    console.log(chatHistory)
    setChatHistory((prev) => [...structuredClone(prev), message]);
  };

  const popChat = () => {
    setChatHistory((perv) => perv.slice(0, perv.length - 1));
  };
  const submitHandler = async (msg: string, cb?: Function) => {
    const message = msg;
    const newChatMessage: ChatCompletionRequestMessage = {
      content: message,
      role: "user",
    };
    pushChat(newChatMessage);
    if (message.length) {
      mutateAsync(chatHistory)
        .then((result) => {
          const resultObject: messageItem = result.choices[0].message!;
          pushChat(resultObject);
          cb && cb();
        })
        .catch(() => {
          popChat();
        });
    }
  };
  return (
    <>
      <Head>
        <title>Chat</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        style={{
          height: "100vh",
          width: "100vw",
          padding: "0 1rem",
        }}
      >
        <Messages messages={chatHistory} />
        <MessageInputBar sendMessage={submitHandler} />
      </main>
    </>
  );
}
